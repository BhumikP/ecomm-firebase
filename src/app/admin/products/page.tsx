'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogTrigger, DialogClose } from "@/components/ui/dialog";
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from "@/hooks/use-toast";
import { PlusCircle, Edit, Trash2, Search, Loader2, Image as ImageIcon, Star } from 'lucide-react'; // Import Star
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import type { IProduct } from '@/models/Product'; // Import IProduct type
import Image from 'next/image'; // Import Next Image
import { Skeleton } from '@/components/ui/skeleton'; // Import Skeleton
import { Badge } from '@/components/ui/badge'; // Import Badge
import { Card, CardHeader, CardContent, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";


// Define Product Type matching the backend model, including _id
type ProductData = IProduct & { _id: string };

// Define the empty product structure for adding new products
// Exclude fields automatically generated by MongoDB (_id, createdAt, updatedAt) and rating (defaulted)
const emptyProduct: Omit<ProductData, '_id' | 'createdAt' | 'updatedAt' | 'rating'> = {
    image: '',
    title: '',
    price: 0,
    discount: null,
    category: '',
    description: '',
    stock: 0,
    features: [],
};


export default function AdminProductsPage() {
  const [products, setProducts] = useState<ProductData[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  // State for the product being edited/added. Use Omit for adding, full ProductData for editing.
  const [currentProduct, setCurrentProduct] = useState<Omit<ProductData, '_id' | 'createdAt' | 'updatedAt' | 'rating'> | ProductData>(emptyProduct);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false); // For main table loading
  const [isDialogLoading, setIsDialogLoading] = useState(false); // For dialog save/delete operations
  const [isDeleting, setIsDeleting] = useState<string | null>(null); // Specific state for delete operation in AlertDialog, store ID
  const { toast } = useToast();

  // Fetch products from API
   const fetchProducts = async () => {
        setIsLoading(true);
        try {
             const response = await fetch(`/api/products?searchQuery=${encodeURIComponent(searchTerm)}&limit=100`); // Add search query, increase limit
             if (!response.ok) {
                 throw new Error('Failed to fetch products');
             }
             const data = await response.json();
             // Ensure products array exists and is an array
              if (data && Array.isArray(data.products)) {
                  setProducts(data.products);
              } else {
                   console.error("Invalid product data received:", data);
                   setProducts([]); // Set to empty array if data is invalid
                   throw new Error("Received invalid product data format.");
              }
        } catch (error: any) {
             console.error('Error fetching products:', error);
             toast({ variant: "destructive", title: "Error", description: error.message || "Could not load products." });
        } finally {
             setIsLoading(false);
        }
    };

  // Fetch products on mount and when searchTerm changes (consider debouncing for real app)
  useEffect(() => {
    fetchProducts();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchTerm]); // Re-fetch when search term changes

  // --- Dialog Handlers ---

  const handleOpenDialog = (product?: ProductData) => {
    if (product) {
      // Make sure features is an array, default to empty array if undefined/null
      setCurrentProduct({ ...product, features: product.features || [] });
      setIsEditing(true);
    } else {
      setCurrentProduct({ ...emptyProduct, features: [] }); // Reset for adding, ensure features is array
      setIsEditing(false);
    }
    setIsDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setIsDialogOpen(false);
    // Short delay allows the dialog to close before resetting state, preventing flicker
    setTimeout(() => {
        setCurrentProduct(emptyProduct);
        setIsEditing(false);
    }, 150);
  };

 const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    const numericFields = ['price', 'discount', 'stock'];

    // Handle features separately if needed (e.g., comma-separated string to array)
    if (name === 'features') {
        // Assuming features are entered as comma-separated values
         const featuresArray = value.split(',').map(f => f.trim()).filter(f => f !== '');
         setCurrentProduct(prev => ({
           ...prev,
           features: featuresArray,
         }));
         return; // Exit early for features
    }

    setCurrentProduct(prev => ({
        ...prev,
        [name]: numericFields.includes(name) ? (value === '' ? null : Number(value)) : value,
    }));
};


  const handleSaveProduct = async () => {
      setIsDialogLoading(true);

       // Basic Client-Side Validation (match backend validation)
      if (!currentProduct.title || !currentProduct.category || !currentProduct.image || !currentProduct.description || currentProduct.price == null || currentProduct.price < 0 || currentProduct.stock == null || currentProduct.stock < 0) {
          toast({ variant: "destructive", title: "Validation Error", description: "Please fill in Title, Category, Image URL, Description, Price (>=0), and Stock (>=0)." });
          setIsDialogLoading(false);
          return;
      }
       if (currentProduct.discount != null && (currentProduct.discount < 0 || currentProduct.discount > 100)) {
            toast({ variant: "destructive", title: "Validation Error", description: "Discount must be between 0 and 100, or leave blank." });
            setIsDialogLoading(false);
            return;
       }


      try {
          let response;
          let successMessage = '';

          // Ensure features is an array before sending
          const productDataToSend = {
              ...currentProduct,
              features: Array.isArray(currentProduct.features) ? currentProduct.features : []
          };


          if (isEditing && '_id' in currentProduct) {
            // --- Update Product ---
            response = await fetch(`/api/products/${currentProduct._id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(productDataToSend),
            });
            successMessage = `"${currentProduct.title}" has been updated.`;
          } else {
            // --- Add New Product ---
             // Remove potential _id if it somehow exists on a new product object
             const { _id, ...newProductData } = productDataToSend as any;
            response = await fetch('/api/products', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(newProductData),
            });
            successMessage = `"${currentProduct.title}" has been added.`;
          }

          if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to save product');
          }

          const savedProduct = await response.json();

          // Update local state optimistically or re-fetch
          if (isEditing) {
               setProducts(prev => prev.map(p => p._id === savedProduct._id ? savedProduct : p));
          } else {
                setProducts(prev => [savedProduct, ...prev]); // Add new product to the top
          }

          toast({ title: isEditing ? "Product Updated" : "Product Added", description: successMessage });
          handleCloseDialog(); // Close dialog on success

      } catch (error: any) {
           console.error("Error saving product:", error);
           toast({ variant: "destructive", title: "Error", description: error.message || "Could not save product." });
      } finally {
          setIsDialogLoading(false);
      }
  };

  // --- Delete Handler ---

  const handleDeleteProduct = async (productId: string, productTitle: string) => {
      setIsDeleting(productId); // Indicate deletion is in progress by ID

      try {
            const response = await fetch(`/api/products/${productId}`, {
                method: 'DELETE',
            });

            if (!response.ok) {
                 const errorData = await response.json();
                 throw new Error(errorData.message || 'Failed to delete product');
            }

          setProducts(prev => prev.filter(p => p._id !== productId));
          toast({ title: "Product Deleted", description: `Product "${productTitle}" has been removed.` });
          // AlertDialog closes itself on action completion

      } catch (error: any) {
          console.error("Error deleting product:", error);
          toast({ variant: "destructive", title: "Error", description: error.message || "Could not delete product." });
      } finally {
         setIsDeleting(null); // Reset deleting state
      }
  };

   // Convert features array to comma-separated string for textarea display
   const featuresToString = (features: string[] | undefined | null): string => {
        if (!Array.isArray(features)) return '';
        return features.join(', ');
   };


  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
        <h2 className="text-3xl font-bold tracking-tight">Manage Products</h2>
        <div className="flex gap-2 w-full sm:w-auto">
            <div className="relative flex-grow">
                 <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                 <Input
                    placeholder="Search products..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 w-full bg-background" // Ensure input has bg
                 />
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
                <Button onClick={() => handleOpenDialog()}>
                    <PlusCircle className="mr-2 h-4 w-4" /> Add Product
                </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                 <DialogTitle>{isEditing ? 'Edit Product' : 'Add New Product'}</DialogTitle>
                 <DialogDescription>
                    {isEditing ? `Update details for "${(currentProduct as ProductData).title}".` : 'Fill in the details for the new product.'}
                 </DialogDescription>
                </DialogHeader>
                {/* Form Fields - Use currentProduct state */}
                <div className="grid gap-4 py-4">
                     <div className="grid grid-cols-4 items-center gap-4">
                         <Label htmlFor="title" className="text-right">Title</Label>
                         <Input id="title" name="title" value={currentProduct.title} onChange={handleInputChange} className="col-span-3" />
                     </div>
                     <div className="grid grid-cols-4 items-center gap-4">
                         <Label htmlFor="category" className="text-right">Category</Label>
                         <Input id="category" name="category" value={currentProduct.category} onChange={handleInputChange} className="col-span-3" />
                     </div>
                      <div className="grid grid-cols-4 items-center gap-4">
                         <Label htmlFor="price" className="text-right">Price ($)</Label>
                         <Input id="price" name="price" type="number" step="0.01" min="0" value={currentProduct.price ?? ''} onChange={handleInputChange} className="col-span-3" />
                     </div>
                     <div className="grid grid-cols-4 items-center gap-4">
                         <Label htmlFor="discount" className="text-right">Discount (%)</Label>
                         <Input id="discount" name="discount" type="number" min="0" max="100" value={currentProduct.discount ?? ''} onChange={handleInputChange} className="col-span-3" placeholder="e.g., 10 (leave blank for none)" />
                     </div>
                     <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="stock" className="text-right">Stock</Label>
                        <Input id="stock" name="stock" type="number" min="0" step="1" value={currentProduct.stock ?? 0} onChange={handleInputChange} className="col-span-3" />
                    </div>
                     <div className="grid grid-cols-4 items-center gap-4">
                         <Label htmlFor="image" className="text-right">Image URL</Label>
                         <Input id="image" name="image" value={currentProduct.image} onChange={handleInputChange} className="col-span-3" placeholder="https://example.com/image.jpg" />
                     </div>
                     <div className="grid grid-cols-4 items-start gap-4">
                         <Label htmlFor="description" className="text-right pt-2">Description</Label>
                         <Textarea id="description" name="description" value={currentProduct.description} onChange={handleInputChange} className="col-span-3 min-h-[100px]" />
                     </div>
                      <div className="grid grid-cols-4 items-start gap-4">
                         <Label htmlFor="features" className="text-right pt-2">Features</Label>
                         <Textarea id="features" name="features" value={featuresToString(currentProduct.features)} onChange={handleInputChange} className="col-span-3 min-h-[80px]" placeholder="Comma-separated, e.g., Feature 1, Feature 2" />
                     </div>
                </div>
                <DialogFooter>
                   <DialogClose asChild>
                       <Button type="button" variant="outline" onClick={handleCloseDialog} disabled={isDialogLoading}>Cancel</Button>
                   </DialogClose>
                    <Button type="button" onClick={handleSaveProduct} disabled={isDialogLoading}>
                        {isDialogLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                        {isEditing ? 'Save Changes' : 'Add Product'}
                    </Button>
                </DialogFooter>
            </DialogContent>
            </Dialog>
        </div>
      </div>

      {/* Products Table */}
      <Card>
         <Table>
            <TableHeader>
            <TableRow><TableHead className="w-[60px]">Image</TableHead><TableHead>Title</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Price</TableHead><TableHead className="text-right">Stock</TableHead><TableHead>Status</TableHead><TableHead className="text-center">Actions</TableHead></TableRow>
            </TableHeader>
            <TableBody>
             {isLoading ? (
                 [...Array(5)].map((_, i) => ( // Skeleton Rows
                    <TableRow key={`skel-${i}`}>
                        <TableCell><Skeleton className="h-10 w-10 rounded bg-muted" /></TableCell>
                        <TableCell><Skeleton className="h-5 w-3/4 bg-muted" /></TableCell>
                        <TableCell><Skeleton className="h-5 w-24 bg-muted" /></TableCell>
                        <TableCell className="text-right"><Skeleton className="h-5 w-16 ml-auto bg-muted" /></TableCell>
                        <TableCell className="text-right"><Skeleton className="h-5 w-12 ml-auto bg-muted" /></TableCell>
                        <TableCell><Skeleton className="h-5 w-20 bg-muted" /></TableCell>
                        <TableCell className="text-center"><Skeleton className="h-8 w-20 mx-auto bg-muted" /></TableCell>
                    </TableRow>
                 ))
             ) : products.length > 0 ? (
                products.map((product) => (
                 <TableRow key={product._id}>
                      <TableCell>
                           <Image
                                src={product.image || '/placeholder.svg'} // Use a local placeholder
                                alt={product.title}
                                width={40}
                                height={40}
                                className="w-10 h-10 object-cover rounded border"
                                onError={(e) => { (e.target as HTMLImageElement).src = '/placeholder.svg'; }} // Fallback on error
                           />
                      </TableCell>
                    <TableCell className="font-medium">{product.title}</TableCell>
                    <TableCell>{product.category}</TableCell>
                    <TableCell className="text-right">
                        ${product.price.toFixed(2)}
                        {product.discount && product.discount > 0 && <span className="ml-1 text-xs text-destructive">(-{product.discount}%)</span>}
                    </TableCell>
                     <TableCell className="text-right">{product.stock}</TableCell>
                      <TableCell>
                          <Badge variant={product.stock > 0 ? 'default' : 'destructive'}
                                 className={product.stock > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                              {product.stock > 0 ? 'In Stock' : 'Out of Stock'}
                          </Badge>
                      </TableCell>
                    <TableCell className="text-center">
                    <div className="flex justify-center gap-1">
                         <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => handleOpenDialog(product)}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                         </Button>

                         <AlertDialog>
                            <AlertDialogTrigger asChild>
                                 <Button variant="ghost" size="icon" className="h-8 w-8 text-destructive hover:text-destructive" disabled={isDeleting === product._id}>
                                     {isDeleting === product._id ? <Loader2 className="h-4 w-4 animate-spin" /> : <Trash2 className="h-4 w-4" />}
                                     <span className="sr-only">Delete</span>
                                 </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                                <AlertDialogHeader>
                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                <AlertDialogDescription>
                                    This action cannot be undone. This will permanently delete the product
                                    "{product.title}".
                                </AlertDialogDescription>
                                </AlertDialogHeader>
                                <AlertDialogFooter>
                                <AlertDialogCancel disabled={isDeleting === product._id}>Cancel</AlertDialogCancel>
                                <AlertDialogAction
                                     onClick={() => handleDeleteProduct(product._id, product.title)}
                                     disabled={isDeleting === product._id}
                                     className="bg-destructive hover:bg-destructive/90"
                                >
                                      {isDeleting === product._id ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                     Delete
                                </AlertDialogAction>
                                </AlertDialogFooter>
                            </AlertDialogContent>
                         </AlertDialog>
                    </div>
                    </TableCell>
                 </TableRow>
                ))
            ) : (
                <TableRow>
                    <TableCell colSpan={7} className="h-24 text-center text-muted-foreground">
                        No products found{searchTerm ? ' matching your search' : ''}.
                    </TableCell>
                </TableRow>
            )}
            </TableBody>
        </Table>
      </Card>

       {/* Placeholder for Pagination Controls */}
       {/* <div className="mt-6 flex justify-center">
           Pagination component will go here
       </div> */}

    </div>
  );
}

// Helper: Basic placeholder SVG for image errors
const PlaceholderSvg = () => (
    <svg width="40" height="40" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg" className="bg-muted text-muted-foreground">
        <rect width="100" height="100" rx="8"/>
        <ImageIcon stroke="currentColor" strokeWidth="5" strokeLinecap="round" strokeLinejoin="round" transform="scale(0.5) translate(50 50)" />
    </svg>
);

